{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": input,
   "metadata": {},
   "outputs": [],
   "source": [
    "# mcq_generator_app.py\n",
    "\n",
    "import os\n",
    "import requests\n",
    "import streamlit as st\n",
    "from typing import List, Dict\n",
    "from youtube_transcript_api import YouTubeTranscriptApi\n",
    "from urllib.parse import urlparse, parse_qs\n",
    "\n",
    "# ===============================\n",
    "# Function 1: Extract YouTube Transcript\n",
    "# ===============================\n",
    "def extract_youtube_transcript(video_url: str) -> str:\n",
    "    try:\n",
    "        video_id = parse_qs(urlparse(video_url).query)['v'][0]\n",
    "        try:\n",
    "            transcript = YouTubeTranscriptApi.get_transcript(video_id, languages=['en'])\n",
    "        except:\n",
    "            transcript = YouTubeTranscriptApi.get_transcript(video_id, languages=['hi'])\n",
    "        return \" \".join([entry['text'] for entry in transcript])\n",
    "    except Exception:\n",
    "        return \"\"\n",
    "\n",
    "# ===============================\n",
    "# Function 2: Extract Transcript from URL\n",
    "# ===============================\n",
    "def extract_transcript_from_url(video_url: str) -> str:\n",
    "    if 'youtube.com' in video_url:\n",
    "        return extract_youtube_transcript(video_url)\n",
    "    else:\n",
    "        headers = {\"authorization\": os.getenv(\"API_KEY\")}\n",
    "        transcript_endpoint = \"https://api.assemblyai.com/v2/transcript\"\n",
    "        response = requests.post(transcript_endpoint, json={\"audio_url\": video_url}, headers=headers)\n",
    "        transcript_id = response.json().get(\"id\")\n",
    "\n",
    "        polling_endpoint = f\"{transcript_endpoint}/{transcript_id}\"\n",
    "        while True:\n",
    "            polling_response = requests.get(polling_endpoint, headers=headers).json()\n",
    "            if polling_response[\"status\"] == \"completed\":\n",
    "                return polling_response[\"text\"]\n",
    "            elif polling_response[\"status\"] == \"error\":\n",
    "                return \"\"\n",
    "\n",
    "# ===============================\n",
    "# Function 3: Extract Transcript (Main Entry)\n",
    "# ===============================\n",
    "def extract_transcript(video_path: str) -> str:\n",
    "    if video_path.startswith(\"http\"):\n",
    "        return extract_transcript_from_url(video_path)\n",
    "    else:\n",
    "        try:\n",
    "            import whisper\n",
    "            model = whisper.load_model(\"base\")\n",
    "            result = model.transcribe(video_path)\n",
    "            return result['text']\n",
    "        except:\n",
    "            return \"\"\n",
    "\n",
    "# ===============================\n",
    "# Function 4: YouTube Title & Description\n",
    "# ===============================\n",
    "def get_youtube_title_description(video_url: str) -> str:\n",
    "    video_id = parse_qs(urlparse(video_url).query)['v'][0]\n",
    "    api_key = os.getenv(\"YOUTUBE_API_KEY\")\n",
    "    if api_key:\n",
    "        endpoint = f\"https://www.googleapis.com/youtube/v3/videos?part=snippet&id={video_id}&key={api_key}\"\n",
    "        response = requests.get(endpoint).json()\n",
    "        items = response.get(\"items\")\n",
    "        if items:\n",
    "            snippet = items[0]['snippet']\n",
    "            return snippet['title'] + \"\\n\" + snippet.get('description', '')\n",
    "    response = requests.get(f\"https://www.youtube.com/oembed?url={video_url}&format=json\")\n",
    "    if response.status_code == 200:\n",
    "        return response.json().get(\"title\", \"\")\n",
    "    return \"\"\n",
    "\n",
    "# ===============================\n",
    "# Function 5: Generate MCQ via Gemini\n",
    "# ===============================\n",
    "def generate_mcq_gemini(transcript: str, num_questions: int = 5, language: str = \"en\") -> Dict[str, List[str]]:\n",
    "    headers = {\n",
    "        \"Content-Type\": \"application/json\",\n",
    "        \"Authorization\": f\"Bearer {os.getenv('GEMINI_API_KEY')}\"\n",
    "    }\n",
    "    prompt = f\"\"\"\n",
    "    Generate {num_questions} multiple choice questions in {language} based on the following content:\n",
    "    ```{transcript}```\n",
    "    Return the result as a JSON object with question as key and value as a list of 4 options followed by the correct answer.\n",
    "    \"\"\"\n",
    "    response = requests.post(\"https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent\", \n",
    "                             headers=headers, \n",
    "                             json={\"contents\": [{\"parts\": [{\"text\": prompt}]}]})\n",
    "    try:\n",
    "        text = response.json()['candidates'][0]['content']['parts'][0]['text']\n",
    "        return eval(text)\n",
    "    except:\n",
    "        return {}\n",
    "\n",
    "# ===============================\n",
    "# Function 6: Generate MCQs in Both Languages\n",
    "# ===============================\n",
    "def generate_mcq_from_video_both_languages(video_path: str, num_questions: int = 5) -> Dict[str, Dict[str, List[str]]]:\n",
    "    transcript = extract_transcript(video_path)\n",
    "    if not transcript:\n",
    "        transcript = get_youtube_title_description(video_path)\n",
    "    return {\n",
    "        \"English\": generate_mcq_gemini(transcript, num_questions=num_questions, language=\"en\"),\n",
    "        \"Hindi\": generate_mcq_gemini(transcript, num_questions=num_questions, language=\"hi\")\n",
    "    }\n",
    "\n",
    "# ===============================\n",
    "# Streamlit Frontend\n",
    "# ===============================\n",
    "st.title(\"üìΩÔ∏è YouTube Video to MCQ Quiz\")\n",
    "video_url = st.text_input(\"Enter YouTube or direct video URL:\")\n",
    "num_qs = st.slider(\"Number of MCQs\", 1, 10, 5)\n",
    "\n",
    "if st.button(\"Generate Quiz\") and video_url:\n",
    "    with st.spinner(\"Generating MCQs...\"):\n",
    "        mcqs = generate_mcq_from_video_both_languages(video_url, num_questions=num_qs)\n",
    "    \n",
    "    for lang, questions in mcqs.items():\n",
    "        st.header(f\"{lang} Questions\")\n",
    "        for q, opts in questions.items():\n",
    "            user_ans = st.radio(q, opts[:-1], key=q+lang)\n",
    "            if st.button(f\"Submit Answer ({lang})\", key=f\"{q}_submit_{lang}\"):\n",
    "                if user_ans == opts[-1]:\n",
    "                    st.success(\"Correct!\")\n",
    "                else:\n",
    "                    st.error(f\"Incorrect. Correct answer: {opts[-1]}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "f89eb8fb-a29c-4f01-833c-d59cb406dd14",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (838101690.py, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[3], line 1\u001b[1;36m\u001b[0m\n\u001b[1;33m    streamlit run\u001b[0m\n\u001b[1;37m              ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "streamlit run "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "90c80c06-86ae-4326-9865-7c3af5694f08",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
